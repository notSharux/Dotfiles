#!/bin/sh

FM_Action () { # Usage: FM_Action
    move=$(printf '%s\n' "$ACTLIST" | yprompt "Actions:" "${FM_OPTS_GENERIC--fn "$FM_GENERIC_FONT" -sb "$FM_GENERIC_COLOR"}")
    case $move in
	"$FM_PCP") FM_PCP ;;
	"$FM_NEW") FM_NEW ;;
	"$FM_MVV"|"$FM_YAK"|"$FM_LNK") FM_MYL ;;
	"$FM_REM") FM_REM ;;
	"$FM_DEL") FM_DEL ;;
	"$FM_TRH") FM_TRH ;;
	"$FM_HIS") FM_HIS ;;
	"$FM_BMK") FM_BMK ;;
	"$FM_CMD") FM_CMD ;;
	"$FM_ZIP") FM_ZIP ;;
	"$FM_SDO") FM_SDO ;;
	"$FM_EYE") FM_EYE ;;
    esac
    MainMenu
}

BulkListAll () { # Usage: BulkListAll
    SELECTED="$list"
    [ -n "$SELECTED" ] && check=$(printf '%s' "$SELECTED" | yprompt "Check selections. (Enter to continue, ESC to quit)" "${FM_OPTS_ACTION_LV1--fn "$FM_GENERIC_FONT" -sb "$FM_ACTION_COLOR_LV1"}")

    # add PWD back to selection's path
    IFS="$nl"
    set -- $SELECTED
    unset IFS SELECTED
    for selection do
        SELECTED="$SELECTED${nl}$PWD/$selection"
    done
    SELECTED=${SELECTED#$nl}
}


BulkListMass () { # Usage: BulkListMass
    SELECTED="$list"
    [ -f "$FM_MASFILE" ] && rm "$FM_MASFILE"

    printf '%s\n' "$SELECTED" > "$FM_MASFILE"
    NotiPrompt "Remove unwanted names and remain the desire ones."
    FileOpen "$FM_MASFILE"

    SELECTED="$(cat -u $FM_MASFILE)"
    [ -n "$SELECTED" ] && check=$(printf '%s' "$SELECTED" | yprompt "Check selections. (Enter to continue, ESC to quit)" "${FM_OPTS_ACTION_LV1--fn "$FM_GENERIC_FONT" -sb "$FM_ACTION_COLOR_LV1"}")

    # add PWD back to selection's path
    IFS="$nl"
    set -- $SELECTED
    unset IFS SELECTED
    for selection do
        SELECTED="$SELECTED${nl}$PWD/$selection"
    done
    SELECTED=${SELECTED#$nl}

    rm "$FM_MASFILE"
}

BulkMode () { # Usage: BulkMode [MSG]
    HERE=""
    bulklist=""
    ActionMenu "$1" "${FM_OPTS_ACTION_BULK--fn "$FM_GENERIC_FONT" -sb "$FM_ACTION_COLOR_BULK"}" || return && allowbulk="NotAllowed"

    while [ "$bulkselection" = "true" ]; do
	ActionMenu "$1" "${FM_OPTS_ACTION_BULK--fn "$FM_GENERIC_FONT" -sb "$FM_ACTION_COLOR_BULK"}" || return && allowbulk="NotAllowed"
	HERE=$bulklist
	allowbulk="NotAllowed"
    done

    SELECTED=$(printf '%s' "${HERE#${nl}}" | uniq)
    allowbulk="NotAllowed"

    [ "$actCHOICE" = "$ENDSELECTION" ] &&
	[ -n "$SELECTED" ] &&
	check=$(printf '%s' "$SELECTED" | yprompt "Check selections. (Enter to continue, ESC to quit) " "${FM_OPTS_ACTION_LV1--fn "$FM_GENERIC_FONT" -sb "$FM_ACTION_COLOR_LV1"}")
}

DirCheck () {
    [ "$result" -eq 0 ] &&
	case "$rollingmenu" in
	    "true")
		rollmenu=""
		cd "../" && result=""
		rolldir="$PWD"
		;;
	    *)
		cd "../" && result=""
		;;
	esac || result=""
}

FM_BMK () { # Usage: FM_BMK
    markmenu=$(printf '%s\n%s\n%s' "$(cat -u "$FM_BMKFILE")" "Add BMK" "Delete BMK" | yprompt "Dmenufm Bookmark" "${FM_OPTS_GENERIC--fn "$FM_GENERIC_FONT" -sb "$FM_GENERIC_COLOR"}")
    # Add \n at end of file
    [ "$(tail -c 1 "$FM_BMKFILE")" != "" ] && echo >> "$FM_BMKFILE"
    case "$markmenu" in
	"Add BMK")
	    ActionMenu "Choose file / directory and add to BMK: " "${FM_OPTS_ACTION_LV1--fn "$FM_GENERIC_FONT" -sb "$FM_ACTION_COLOR_LV1"}" || return
	    mark=${HERE##*/}
	    [ -n "$mark" ] && printf '%s' "$mark - $HERE" >> "$FM_BMKFILE" && NotiPrompt "$mark added."
	    ;;
	"Delete BMK")
	    BMK="$(cat -u "$FM_BMKFILE")"
	    delbmk=$(< "$FM_BMKFILE" yprompt "Delete chosen bookmark: " "darkred") || return
	    [ -n "$delbmk" ] &&
		printf '%s' "${BMK%%$nl"$delbmk"*}" "${BMK##*"$delbmk"}" > "$FM_BMKFILE" &&
		NotiPrompt "$delbmk deleted"
	    ;;
	*)
	    destination=${markmenu##* - }

	    [ -n "$destination" ] &&
		case "$termpath" in
		    "true")
			printf '%s' "$destination"
			exit 0
			;;
		    *)
			cd "$destination" || FileOpen "$destination"
			;;
		esac
	    ;;
    esac
}

BulkCMD () { # Usage: BulkCMD
    execfile="$SELECTED"
    execmd=${execmd##$*}

    IFS="$nl"
    set -- $execfile
    unset IFS
    for selection do eval "$execmd \"$selection\""; done && NotiPrompt "Command executed on selected."
}

ExecCMD () { # Usage: ExecCMD [CMD]
    software=$(printf '%s' "${1%% *}")
    appdesktop=$(find "$XDGDIR1" "$XDGDIR2" -name "*$software*.desktop" | tail -n 1)
    [ -n "$appdesktop" ] &&
	grep 'Terminal=false' "$appdesktop" &&
	printf '%s' "$1" | ${SHELL:-"/bin/sh"} ||
	$TERMINAL -e $1 | ${SHELL:-"/bin/sh"}
}

FM_CMD () { # Usage: FM_CMD
    cmdmenu=$(printf '%s\n' "$(cat -u "$FM_CMDFILE")" "Add CMD" "Delete CMD" | yprompt "Dmenufm Custom Command" "${FM_OPTS_GENERIC--fn "$FM_GENERIC_FONT" -sb "$FM_GENERIC_COLOR"}")
    [ "$(tail -c 1 "$FM_CMDFILE")" != "" ] && echo >> "$FM_CMDFILE"
    case "$cmdmenu" in
	"Add CMD")
	    addcmd=$(xprompt "Recording your command: " "${FM_OPTS_ACTION_LV1--fn "$FM_GENERIC_FONT" -sb "$FM_ACTION_COLOR_LV1"}") || return
	    desp=$(xprompt "Enter command description: " "${FM_OPTS_ACTION_LV1--fn "$FM_GENERIC_FONT" -sb "$FM_ACTION_COLOR_LV1"}") || return
	    [ -n "$addcmd" ] &&
		printf '%s' "$addcmd - $desp" >> "$FM_CMDFILE" &&
		NotiPrompt "$addcmd added."
	    ;;
	"Delete CMD")
	    CMD="$(cat -u "$FM_CMDFILE")"
	    delcmd=$(< "$FM_CMDFILE" yprompt "Delete chosen command: " "darkred")
	    [ -n "$delcmd" ] &&
		printf '%s' "${CMD%%$nl"$delcmd"*}" "${CMD##*"$delcmd"}" > "$FM_CMDFILE" &&
		NotiPrompt "$delcmd deleted"
	    ;;
	*)
	    execmd=${cmdmenu%% - *}
	    if printf '%s' "$execmd" | grep '\$'; then
		allowbulk="Bulk Execute"
		allselection="Bulk Execute All"
		masselection="Bulk Execute Mass"
		ActionMenu "Choose and execute: " "${FM_OPTS_ACTION_LV1--fn "$FM_GENERIC_FONT" -sb "$FM_ACTION_COLOR_LV1"}"
		case "$actCHOICE" in
		    "$allselection")
			BulkListAll
			[ -n "$check" ] && BulkCMD
			;;
		    "$masselection")
			BulkListMass
			[ -n "$check" ] && BulkCMD
			;;
		    *)
			case "$bulkselection" in
			    "true")
				BulkMode "Select to execute: "
				[ -n "$check" ] && BulkCMD
				;;
			    *)
				SELECTED="$HERE"
				BulkCMD
				;;
			esac
			;;
		esac
	    else
		ExecCMD "$execmd"
	    fi
	    ;;
    esac
}

DangerMenu () { # Usage: DangerMenu [CMD] [MSG] (OPT: [Dest])
    cmd="$1"
    destination="$3"
    if DangerPrompt "$2"; then
	IFS="$nl"
	set -- $SELECTED
	unset IFS
	for selection do [ -z "$destination" ] && eval "$cmd \"$selection\"" || eval "$cmd \"$selection\" \"$destination\""; done && NotiPrompt "Selected removed."
    fi
}

FM_DEL () { # Usage: FM_DEL
    allowbulk="Bulk Delete"
    allselection="Bulk Delete All"
    masselection="Bulk Delete Mass"
    ActionMenu "Remove file / directory: " "${FM_OPTS_ACTION_LV1--fn "$FM_GENERIC_FONT" -sb "$FM_ACTION_COLOR_LV1"}" || return && allowbulk="NotAllowed"
    case "$actCHOICE" in
	"$allselection")
	    BulkListAll
	    [ -n "$check" ] && DangerMenu "rm -rf" "Delete all selected in $name?" ""
	    ;;
	"$masselection")
	    BulkListMass
	    [ -n "$check" ] && DangerMenu "rm -rf" "Delete all selected in $name?" ""
	    ;;
	*)
	    case "$bulkselection" in
	        "true")
		    BulkMode "Select files / directories to delete: "
		    [ -n "$check" ] && DangerMenu "rm -rf" "Delete all selected?" ""
		    ;;
		*)
		    # Single-selection mode
		    allowbulk="NotAllowed"
		    # Check the chosen on is directory or not
		    [ -n "$HERE" ] && [ -d "$HERE" ] && result=$?
		    [ -n "$HERE" ] && SELECTED="$HERE" && DangerMenu "rm -rf" "Remove all the files / directories in $name?" ""
		    DirCheck
		    ;;
	    esac
	    ;;
    esac
}

History () { # Usage: History [DIR/FILE]
    dirmark="${PWD##*/}"
    case "$1" in
        "$BACKWARD"|"$TARGET"|"$dirmark")
	    printf '%s\n' "$dirmark - $PWD" >> "$FM_HISFILE"
	    ;;
	*)
	    printf '%s\n' "$1 - $PWD/$1" >> "$FM_HISFILE"
	    ;;
    esac
    # Limit the max number of history
    TMP=$(wc -l "$FM_HISFILE" || grep -c ^ "$FM_HISFILE")
    hisnum=${TMP%% *}
    unset TMP
    [ "$hisnum" -ge "$FM_MAX_HIS_LENGTH" ] &&
	HIS="$(cat -u $FM_HISFILE)" &&
	printf '%s\n' "${HIS#*"$nl"}" > "$FM_HISFILE"
}

FM_HIS () { # Usage: FM_HIS
    # Use sed command to mimic reverse of cat for POSIX.
    goto=$(sed '1!G;h;$!d' "$FM_HISFILE" | yprompt "Dmenufm History" "${FM_OPTS_GENERIC--fn "$FM_GENERIC_FONT" -sb "$FM_GENERIC_COLOR"}")
    destination=${goto##* - }
    cd "$destination" || FileOpen "$destination"
}

DestMenu () { # Usage: DestMenu
    ActionMenu "Destination: " "${FM_OPTS_ACTION_LV2--fn "$FM_GENERIC_FONT" -sb "$FM_ACTION_COLOR_LV2"}" || return && allowbulk="NotAllowed" && actCHOICE="placeholder"
    case "$HERE" in
        '') ;;
	*)
	    destination="$HERE"
	    destname="$name"
	    IFS="$nl"
	    set -- $SELECTED
	    unset IFS
	    for selection do eval "$cmd \"$selection\" \"$destination\""; done && NotiPrompt "Selected files / directories $cmdname to $destname"
	    ;;
    esac
}

FM_MYL () { # Usage: FM_MYL
    case "$move" in
	"$FM_MVV")
	    cmd="mv"
	    cmdname="moved"
	    cmdverb="move"
	    allowbulk="Bulk Move"
	    allselection="Bulk Move All"
	    masselection="Bulk Move Mass"
	    ;;
	"$FM_YAK")
	    cmd="cp -R"
	    cmdname="copied"
	    cmdverb="copy"
	    allowbulk="Bulk Copy"
	    allselection="Bulk Copy All"
	    masselection="Bulk Copy Mass"
	    ;;
	"$FM_LNK")
	    cmd="ln -s"
	    cmdname="linked"
	    cmdverb="link"
	    allowbulk="Bulk Link"
	    allselection="Bulk Link All"
	    masselection="Bulk Link Mass"
	    ;;
    esac
    ActionMenu "Source: " "${FM_OPTS_ACTION_LV1--fn "$FM_GENERIC_FONT" -sb "$FM_ACTION_COLOR_LV1"}" || return && allowbulk="NotAllowed"
    case "$actCHOICE" in
        "$allselection")
	    BulkListAll
	    [ -n "$check" ] && DestMenu
	    ;;
	"$masselection")
	    BulkListMass
	    [ -n "$check" ] && DestMenu
	    ;;
	*)
	    [ -n "$HERE" ] &&
		case "$bulkselection" in
		    "true")
			BulkMode "Select files / directories to $cmdverb: "
			[ -n "$check" ] && DestMenu
			;;
		    *)
			SELECTED="$HERE"
			[ -d "$SELECTED" ] && cd "../"
			[ -n "$SELECTED" ] && DestMenu
			;;
		esac
	    ;;
    esac
}

NewFileDir () { # Usage: NewFileDir
    name=$(xprompt "Type name for $newmenu; Press ESC to leave" "${FM_OPTS_ACTION_LV1--fn "$FM_GENERIC_FONT" -sb "$FM_ACTION_COLOR_LV1"}") || return
    case "$name" in
	'~') NotiPrompt "Alias to $HOME; not a proper name." && continue ;;
	'/') NotiPrompt "Alias to root; not a proper name." && continue ;;
	':') NotiPrompt "Alias for command prompt; not a proper name." && continue ;;
	'.') NotiPrompt "Alias for current directory; not a proper name." && continue ;;
	'..') NotiPrompt "Alias for parent directory; not a proper name." && continue ;;
	'*'|'!'|'?'|'+'|'['|']'|'^'|'$'|'{'|'}'|'-'|'('|')'|'|'|'\') NotiPrompt "Shell pattern; not a proper name." && FM_NEW ;;
	*) $cmd "$name" ;;
    esac
}

FM_NEW () { # Usage: FM_NEW
    name="placeholder"
    newmenu=$(printf '%s\n' "File" "Directory" | yprompt "Create new files or directories" "${FM_OPTS_GENERIC--fn "$FM_GENERIC_FONT" -sb "$FM_GENERIC_COLOR"}")
    while [ -n "$newmenu" ] && [ -n "$name" ]; do
	[ "$newmenu" = "File" ] &&
	    cmd='touch' ||
	    cmd="mkdir -p"
	NewFileDir
    done
}

FM_PCP () { # Usage: FM_PCP
    # Copy path to xclip/xsel, and send notification.
    ActionMenu "Copy file / directory path: " "${FM_OPTS_ACTION_LV1--fn "$FM_GENERIC_FONT" -sb "$FM_ACTION_COLOR_LV1"}" || return
    [ -n "$HERE" ] &&
	case "$clipcopy" in
	    "pbcopy") printf '%s' "$HERE" | pbcopy && NotiPrompt "Path $name copied to clipboard." ;;
	    "xclip") printf '%s' "$HERE" | xclip -selection clipboard && NotiPrompt "Path $name copied to clipboard." ;;
	    "xsel") printf '%s' "$HERE" | xsel --clipboard && NotiPrompt "Path $name copied to clipboard." ;;
	esac
}

BulkRename () { # Usage: BulkRename
    case "$SELECTED" in
        '') return ;;
	*)
	    [ -f "$FM_REMFILE" ] && rm "$FM_REMFILE" "$FM_REMFILE.dirname" "$FM_REMFILE.backup"

	    printf '%s' "$SELECTED" > "$FM_REMFILE.backup"
	    printf '%s' "$SELECTED" > "$FM_REMFILE"

	    FileOpen "$FM_REMFILE"

	    if [ $(wc -l "$FM_REMFILE") -ne $(wc -l "$FM_REMFILE.backup") ]; then
		NotiPrompt "ERROR: Lines mismatch in rename file; do nothing." && return
	    else
		renamevar=$(paste -d ':' "$FM_REMFILE.backup" "$FM_REMFILE")
		# Set IFS for for loop as \n
		IFS="$nl"
		set -- $renamevar
		unset IFS
		for selection do
		    start=${selection%%:*}
		    destination="${selection##*:}"
		    [ "$start" != "$destination" ] && eval "mv \"$start\" \"$destination\""
		done
	    fi
	    rm "$FM_REMFILE" "$FM_REMFILE.dirname" "$FM_REMFILE.backup"
	    ;;
    esac
}

FM_REM () { # Usage: FM_REM
    allowbulk="Bulk Rename"
    allselection="Bulk Rename All"
    masselection="Bulk Rename Mass"
    ActionMenu "Source: " "${FM_OPTS_ACTION_LV1--fn "$FM_GENERIC_FONT" -sb "$FM_ACTION_COLOR_LV1"}" || return && allowbulk="NotAllowed"
    case "$actCHOICE" in
        "$allselection")
	    BulkListAll
	    [ -n "$check" ] && BulkRename
	    ;;
        "$masselection")
	    BulkListMass
	    [ -n "$check" ] && BulkRename
	    ;;
	*)
	    case "$bulkselection" in
	        "true")
		    BulkMode "Select files / directories to rename: "
		    [ -n "$check" ] && BulkRename
		    ;;
		*)
		    [ -n "$HERE" ] && [ -d "$HERE" ] && result=$?
		    SELECTED="$HERE"
		    [ -n "$SELECTED" ] && BulkRename
		    DirCheck
		    ;;
	    esac
	    ;;
    esac
}

FM_TRH () { # Usage: FM_TRH
    allowbulk="Bulk Trash"
    allselection="Bulk Trash All"
    masselection="Bulk Trash Mass"
    trashmenu=$(printf '%s\n' "Move to trash" "Go to trash" "Empty trash" | yprompt "Dmenufm Trash" "${FM_OPTS_GENERIC--fn "$FM_GENERIC_FONT" -sb "$FM_GENERIC_COLOR"}")
    case $trashmenu in
	"Move to trash")
	    ActionMenu "Move file / directory to trash: " "${FM_OPTS_ACTION_LV1--fn "$FM_GENERIC_FONT" -sb "$FM_ACTION_COLOR_LV1"}" || return && allowbulk="NotAllowed"
	    case "$actCHOICE" in
	        "$allselection")
		    BulkListAll
		    [ -n "$check" ] && DangerMenu "mv" "Move all selected to trash?" "$FM_TRASH"
		    ;;
	        "$masselection")
		    BulkListMass
		    [ -n "$check" ] && DangerMenu "mv" "Move all selected to trash?" "$FM_TRASH"
		    ;;
		*)
		    if [ "$bulkselection" = "true" ]; then
			BulkMode "Select files / directories to move to trash: "
			[ -n "$check" ] && DangerMenu "mv" "Move all selected to trash?" "$FM_TRASH"
		    else
			allowbulk="NotAllowed"
			# Check the chosen on is directory or not
			[ -n "$HERE" ] && [ -d "$HERE" ] && result=$?
			SELECTED="$HERE"
			[ -n "$SELECTED" ] && DangerMenu "mv" "Move $name to trash?" "$FM_TRASH"
			DirCheck
		    fi
		    ;;
	    esac
	    ;;
	"Go to trash")
	    cd "$FM_TRASH" || return
	    ;;
	"Empty trash")
	    # Lesson: You cannot quote a wildcard. No quote on *.
	    DangerPrompt "Remove all files and/or directory in trash?" &&
		rm -rf "$FM_TRASH"/* &&
		NotiPrompt "Trash is empty." ||
		return
	    ;;
    esac
}

BulkCompress () { # Usage: BulkCompress
    case $compression_type in
	"tar.gz") cmd="tar -czvf" ;;
	"tar.xz") cmd="tar -cJvf" ;;
	"tar.bz2") cmd="tar -cjvf" ;;
	"gz") cmd="gzip -k" ;;
	"bz2") cmd="bzip2 -k" ;;
	"xz") cmd="xz -k" ;;
	"lzma") cmd="lzma -k" ;;
	"7z") cmd="7z a" ;;
	"zip") cmd="zip -r" ;;
	*) return ;;
    esac
    if echo "$compression_type" | grep -E '^tar|^zip'; then
	[ -d "$FM_ZIPATH" ] && rm -rf "$FM_ZIPATH"
	mkdir "$FM_ZIPATH"
	IFS="$nl"
	set -- $SELECTED
	unset IFS
	for file do eval "cp -R \"$file\" \"$FM_ZIPATH\""; done
	archive_name=$(xprompt "Please insert archive name: " "${FM_OPTS_ACTION_LV2--fn "$FM_GENERIC_FONT" -sb "$FM_ACTION_COLOR_LV2"}" | cut -d '.' -f1) || return
	[ -n "$archive_name" ] &&
	    compressdir_name="$archive_name" &&
	    archive_name="$archive_name.$compression_type" &&
	    mv "$FM_ZIPATH" "./$compressdir_name" &&
	    $cmd "$archive_name" ./"$compressdir_name"/* &&
	    NotiPrompt "Compressed to $archive_name" &&
	    rm -rf ./"$compressdir_name"
	rm -rf "$FM_ZIPATH"
    else
	IFS="$nl"
	set -- $SELECTED
	unset IFS
	for file do eval "$cmd \"$file\" && NotiPrompt \"Compressed to ${file##*/}\""; done
    fi
}


FM_ZIP () { # Usage: FM_ZIP
    allowbulk="Bulk Compress"
    allselection="Bulk Compress All"
    masselection="Bulk Compress Mass"
    compression_type=$(printf '%s\n' "$COMPRESSIONLIST" | yprompt "Compression type: " "${FM_OPTS_ACTION_LV1--fn "$FM_GENERIC_FONT" -sb "$FM_ACTION_COLOR_LV1"}" || return && allowbulk="NotAllowed")
    ! printf '%s' "$compression_type" | grep -E '^tar|^zip' && allowbulk="NotAllowed"
    [ -n "$compression_type" ] && ActionMenu "Source: " "${FM_OPTS_ACTION_LV1--fn "$FM_GENERIC_FONT" -sb "$FM_ACTION_COLOR_LV1"}" || return && allowbulk="NotAllowed"
    case "$actCHOICE" in
        "$allselection")
	    BulkListAll
	    [ -n "$check" ] && BulkCompress
	    ;;
	"$masselection")
	    BulkListMass
	    [ -n "$check" ] && BulkCompress
	    ;;
	*)
	    case "$bulkselection" in
	        "true")
		    BulkMode "Select files / directories to compress: "
		    [ -n "$check" ] && BulkCompress
		    ;;
		*)
		    SELECTED="$HERE"
		    [ -n "$SELECTED" ] && BulkCompress
		    ;;
	    esac
	    ;;
    esac
}

FM_SDO () {
    sudo -A dmenufm
}

FM_EYE () {
    preview="true"

    yprompt () { # Usage yprompt [MSG] [BG_COLOR]
	dmenu -f -fn "$FM_GENERIC_FONT" -b -i -sb "$2" -p "$1"
    }

    ActionMenu "Preview mode: " "${FM_OPTS_ACTION_LV1--fn "$FM_GENERIC_FONT" -sb "$FM_ACTION_COLOR_LV1"}" || return && allowbulk="NotAllowed"
    [ -n "$HERE" ] && FileOpen "$HERE" &
    while [ -n "$HERE" ]; do
	wmctrl -ic "$eyeid" &
	ActionMenu "Preview mode: " "${FM_OPTS_ACTION_LV1--fn "$FM_GENERIC_FONT" -sb "$FM_ACTION_COLOR_LV1"}" || return && allowbulk="NotAllowed"
	eyeid="$(xprop -root _NET_ACTIVE_WINDOW | cut -d ' ' -f 5)"
	[ -n "$HERE" ] && FileOpen "$HERE" &
    done
    wmctrl -ic "$eyeid"

    yprompt () { # Usage yprompt [MSG] [BG_COLOR]
	dmenu -f -fn "$FM_GENERIC_FONT" -i -sb "$2" -l 10 -p "$1"
    }

    preview="false"
}
