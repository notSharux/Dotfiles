#!/bin/sh

## PROMPT FUNCTIONS
yprompt () { # Usage yprompt [MSG] [BG_COLOR]
    ${FM_PROG-dmenu} ${FM_OPTS--f -i -l 10} $2 ${FM_OPT_PROMPT--p} "$1 "
}

xprompt () { # Usage xprompt [MSG] [BG_COLOR]
    printf '%s' "" | ${FM_PROG-dmenu} ${FM_OPTS--f -i -l 10} $2 ${FM_OPT_PROMPT--p} "$1 "
}


NotiPrompt () { # Usage NotiPrompt [MSG]
    printf '%s' "" | ${FM_PROG-dmenu} ${FM_OPTS--f -i -l 10} ${FM_NOTIF_OPTS--fn "$FM_NOTIF_FONT" -sb "#d79921" -sf "#1d2021" -nf "#000000" -nb "#000000"} ${FM_OPT_PROMPT--p} "$1 "
}

DangerPrompt () { # Usage: DangerPrompt [MSG] && ...
    [ "$(printf "No\\nYes" | ${FM_PROG-dmenu} ${FM_OPTS--f -i -l 10} ${FM_DANGER_OPTS--fn $FM_DANGER_FONT -nb darkred -sb red -sf white -nf gray} ${FM_OPT_PROMPT--p} "$1")" = "Yes" ]
}


## MENUFUNCTIONS

MenuDir () { # Generate dir
    set -- *
    DIRs=$( for d do [ -d "$d" ] && printf '%s\n' "$d"; done )
}

MenuDotDir () { # Generate dotdir
    set -- .[!.]*
    DOTDIRs=$( for dd do [ -d "$dd" ] && printf '%s\n' "$dd"; done )
}

MenuFile () { # Generate file
    set -- *
    FILEs=$( for f do [ -f "$f" ] && printf '%s\n' "$f"; done )
}

MenuDotFile () { # Generate dotfile
    set -- .[!.]*
    DOTFILEs=$( for df do [ -f "$df" ] && printf '%s\n' "$df"; done )
}

Menu () { # Generate default menu
    set -- *
    norm=$( for f do printf '%s\n' "$f"; done )
    set -- .[!.]*
    hidden=$( for df do printf '%s\n' "$df"; done )
    case $norm in
	'*')
	    case $hidden in
		'.[!.]*') list= ;;
		*) list="$hidden" ;;
	    esac
	    ;;
	*)
	    case $hidden in
		'.[!.]*') list="$norm" ;;
		*) list="$norm${nl}$hidden" ;;
	    esac
	    ;;
    esac
}

UpdateMenu () { # Generate menu based on arguments
    list=
    for element in $keeplist; do
	case $element in
	    DIRs) MenuDir && list="$list${nl}$DIRs" ;;
	    FILEs) MenuFile && list="$list${nl}$FILEs" ;;
	    DOTDIRs) MenuDotDir && list="$list${nl}$DOTDIRs" ;;
	    DOTFILEs) MenuDotFile && list="$list${nl}$DOTFILEs" ;;
	esac
    done
    list=${list#${nl}}
}

ActionMenu () { # Usage: ActionMenu [MSG] [BG_COLOR]
    while [ -n "$actCHOICE" ]; do
	[ -z "$keeplist" ] && Menu || UpdateMenu
	[ "$rollingmenu" = "true" ] && [ -f "$rollmenu" ] || [ "$PWD" = "$rolldir" ] &&
		list="$rollmenu${list#*"$rollmenu"}${nl}${list%%"$rollmenu"*}" &&
		rollmenu="" &&
		rolldir=""
	if [ "$bulkselection" = "true" ]; then
	    actCHOICE=$(printf '%s\n%s\n%s\n%s\n%s' "$BACKWARD" "$TARGET" "$ENDSELECTION" "$FM_HIS" "$list" | yprompt "$1" "$2")
	elif [ "$allowbulk" != "NotAllowed" ]; then
	    actCHOICE=$(printf '%s\n%s\n%s\n%s\n%s\n%s\n%s' "$BACKWARD" "$TARGET" "$allowbulk" "$allselection" "$masselection" "$FM_HIS" "$list" | yprompt "$1" "$2")
	elif [ "$preview" = "true" ]; then
	    actCHOICE=$(printf '%s\n%s\n%s' "$list" "$BACKWARD" "$FM_HIS" | yprompt "$1" "$2")
	else
	    actCHOICE=$(printf '%s\n%s\n%s\n%s' "$BACKWARD" "$TARGET" "$FM_HIS" "$list" | yprompt "$1" "$2")
	fi
	# Outcome matching
	case "$actCHOICE" in
	    "$TARGET")
		case "$termpath" in
		    "true")
			printf '%s' "$PWD" && actCHOICE=""
			break
			;;
		    *)
			HERE="$PWD"
			name="${PWD##*/}"
			[ "$bulkselection" = "true" ] && bulklist="$bulklist${nl}$HERE" && cd "../"
			break
			;;
		esac
		;;
	    "$BACKWARD")
		case "$rollingmenu" in
		    "true")
			rollmenu="$PWD"
			cd "../" || NotiPrompt "Need super user permission to enter this directory"
			rolldir="${PWD##*/}"
			History "$actCHOICE"
			;;
		    *)
			cd "../" || NotiPrompt "Need super user permission to enter this directory"
			History "$actCHOICE"
		esac
		;;
	    "$ENDSELECTION")
		bulkselection="false"
		break
		;;
	    "$allowbulk")
		bulkselection="true"
		break
		;;
	    "$allselection"|"$masselection")
		bulkselection="false"
		HERE="$PWD"
		name="${PWD##*/}"
		break
		;;
	    "$FM_HIS")
		FM_HIS
		continue
		;;
	    *)
		if [ -d "$actCHOICE" ]; then
		    case "$rollingmenu" in
		        "true")
			    rolldir="$PWD"
			    cd "$actCHOICE" || NotiPrompt "Need super user permission to enter this directory"
			    rollmenu="$actCHOICE"
			    History "$actCHOICE"
			    ;;
			*)
			    cd "$actCHOICE" || NotiPrompt "Need super user permission to enter this directory"
			    History "$actCHOICE"
			    ;;
		    esac
		    continue
		elif [ -f "$actCHOICE" ]; then
		    case "$termpath" in
		        "true")
			    printf '%s' "$PWD/$actCHOICE" && actCHOICE=""
			    break
			    ;;
			*)
			    rollmenu="$actCHOICE"
			    HERE="$PWD/$actCHOICE"
			    name="$actCHOICE"
			    [ "$bulkselection" = "true" ] && bulklist="$bulklist${nl}$HERE"
			    break
			    ;;
		    esac
		else
		    HERE=""
		    name=""
		    bulkselection="false"
		    actCHOICE="placeholder"
		    break
		fi
		;;
	esac
    done
}

TwoPWD () { # Usage: Show last two level of PWD
    # Need "${PWD##*/}" to prevent special character
    TMP="${PWD%%/"${PWD##*/}"}"
    TMP="${TMP##*/}"
    [ ${#TMP} -ge 30 ] && TMP="$(printf '%.30s...' "$TMP")"
    TMP2="${PWD##*/}"
    [ ${#TMP2} -ge 30 ] && TMP2="$(printf '%.30s...' "$TMP2")"
    TwoPWD="$TMP/$TMP2"
    unset TMP TMP2
}

MainMenu () { # Usage: MainMenu
    while [ -n "$CHOICE" ]; do
	[ -z "$keeplist" ] && Menu || UpdateMenu
	[ "$rollingmenu" = "true" ] && [ -f "$rollmenu" ] || [ "$PWD" = "$rolldir" ] &&
		list="$rollmenu${list#*"$rollmenu"}${nl}${list%%"$rollmenu"*}" &&
		rollmenu="" &&
		rolldir=""
	TwoPWD
	CHOICE=$(printf '%s\n%s\n%s\n%s\n%s\n%s' "$BACKWARD" "$TARGET" "$ACTION" "$TERM" "$OPENIN" "$list" | yprompt "$TwoPWD" "${FM_OPTS_GENERIC--fn "$FM_GENERIC_FONT" -sb "$FM_GENERIC_COLOR"}")
	# Outcome matching
	case "$CHOICE" in
	    "$TARGET")
		case "$termpath" in
		    "true")
			printf '%s' "$PWD" && CHOICE=""
			break
			;;
		    *)
			FileOpen "$PWD"
			History "$CHOICE"
			;;
		esac
		;;
	    "$BACKWARD")
		case "$rollingmenu" in
		    "true")
			rollmenu="${PWD##*/}"
			cd "../" || NotiPrompt "Need super user permission to enter this directory"
			rolldir="$PWD"
			History "$CHOICE"
			;;
		    *)
			cd "../" || NotiPrompt "Need super user permission to enter this directory"
			History "$CHOICE"
			;;
		esac
		;;
	    "$ACTION") FM_Action ;;
	    "$TERM") $TERMINAL ;;
	    "$OPENIN")
		openin=1
		FM_OPENER=$(dmenu_path | yprompt "Choose opening software: " "${FM_OPTS_GENERIC--fn "$FM_GENERIC_FONT" -sb "$FM_GENERIC_COLOR"}")
		continue
		;;
	    *)
		if [ -d "$CHOICE" ]; then
		    case "$rollingmenu" in
			"true")
			    rolldir="$PWD"
			    cd "$CHOICE" || NotiPrompt "Need super user permission to enter this directory"
			    rollmenu="$CHOICE"
			    History "$CHOICE"
			    ;;
			*)
			    cd "$CHOICE" || NotiPrompt "Need super user permission to enter this directory"
			    History "$CHOICE"
			    ;;
		    esac
		    continue
		elif [ -f "$CHOICE" ]; then
		    case "$termpath" in
		        "true")
			    printf '%s' "$PWD/$CHOICE" && CHOICE=""
			    break
			    ;;
			*)
			    rollmenu="$CHOICE"
			    FileOpen "$PWD/$CHOICE"
			    History "$CHOICE"

			    # Reload conf
			    if openin=1; then
				openin=0
				unset FM_OPENER
				configuration
			    fi
			    ;;
		    esac
		else
		    break
		fi
		;;
	esac
    done
}
